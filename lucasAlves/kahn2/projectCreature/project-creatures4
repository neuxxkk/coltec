// Base Creature class
var Creature = function(x, y) {
    this.position = new PVector(x, y);
    this.eye1 = new PVector(random(-10, 10), random(-10, 10));
    this.eye2 = new PVector(random(-10, 10), random(-10, 10));
    this.velocity = new PVector(0, 0);
    this.acceleration = new PVector(0, 0);
    this.color = color(random(0, 255), random(0, 255), random(0, 255));
    this.size = random(20, 40);
    this.health = 100;  // Health starts at 100
};

// Apply force to the creature
Creature.prototype.applyForce = function(force) {
    this.acceleration.add(force);
};

// Update creature's state
Creature.prototype.update = function() {
    this.velocity.add(this.acceleration);
    
    this.velocity = constrain(this.velocity, -10, 10);   

    this.position.add(this.velocity);

    // Apply friction
    var friction = this.velocity.get();
    friction.normalize();
    friction.mult(-0.05);
    this.applyForce(friction);
    this.acceleration.mult(0);

    // Reduce health gradually
    this.health -= 0.1;

    // Ensure health doesn't drop below 0
    this.health = max(this.health, 0);

    // Limit creature to screen boundaries
    if (this.position.x > 400) {
        this.position.x = 400;
        this.velocity.x *= -1;
    } else if (this.position.x < 0) {
        this.position.x = 0;
        this.velocity.x *= -1;
    }

    if (this.position.y > 400) {
        this.position.y = 400;
        this.velocity.y *= -1;
    } else if (this.position.y < 0) {
        this.position.y = 0;
        this.velocity.y *= -1;
    }
};

// Display the creature
Creature.prototype.display = function() {
    stroke(0);
    strokeWeight(2);
    fill(this.color);

    ellipse(this.position.x, this.position.y, this.size, this.size);

    fill(22, 133, 45);
    ellipse(this.position.x + this.eye1.x, this.position.y + this.eye1.y, 5, 5);
    ellipse(this.position.x + this.eye2.x, this.position.y + this.eye2.y, 5, 5);
};

// Oscillation movement
Creature.prototype.oscillate = function() {
    var oscillationSpeed = 0.05; // Reduzido para evitar movimentos muito rápidos
    var oscillationAmplitude = 0.2; // Base amplitude de oscilação

    // Mudança aleatória na direção e na amplitude da oscilação
    var angle = sin(frameCount * oscillationSpeed) * random(-PI / 4, PI / 4);
    var oscillation = new PVector(cos(angle), sin(angle));
    oscillation.mult(random(-oscillationAmplitude, oscillationAmplitude)); // Amplitude aleatória

    this.applyForce(oscillation);
};

// Check if the creature eats food
Creature.prototype.eat = function(food) {
    var d = dist(this.position.x, this.position.y, food.position.x, food.position.y);
    if (d < this.size / 2) {
        this.health += 20; // Gain health when eating food
        this.health = min(this.health, 100); // Cap health at 100
        food.consumed = true; // Mark the food as eaten
    }
};

// Derived class for FastCreature
var FastCreature = function(x, y) {
    Creature.call(this, x, y);
    this.size = random(15, 30);
    this.color = color(50, 150, 255); // Unique color
};
FastCreature.prototype = Object.create(Creature.prototype);
FastCreature.prototype.constructor = FastCreature;

// Modify behavior to be faster
FastCreature.prototype.applyForce = function(force) {
    force.mult(1.5); // Fast creatures apply forces with more intensity
    this.acceleration.add(force);
};

// Food class
var Food = function(x, y) {
    this.position = new PVector(x, y);
    this.consumed = false;
};

Food.prototype.display = function() {
    if (!this.consumed) {
        fill(0, 255, 0);
        noStroke();
        ellipse(this.position.x, this.position.y, 8, 8);
    }
};

// Arrays to hold creatures and food
var creatures = [];
var foodItems = [];

// Populate the environment with creatures and food
for (var i = 0; i < 20; i++) {
    creatures.push(new Creature(random(width), random(height)));
}
for (var i = 0; i < 10; i++) {
    creatures.push(new FastCreature(random(width), random(height)));
}

function addFood() {
    for (var i = 0; i < 5; i++) {
        foodItems.push(new Food(random(width), random(height)));
    }
}

var bg1 = random(255);
var bg2 = random(255);
var bg3 = random(255);
var offbg1;
var offbg2;
var offbg3;
// Main draw loop
draw = function() {
    
    if (frameCount % (60 * 3) === 0) { addFood(); }
    
    if (random(1) >= 0.8){
        offbg1 = random(-0.5,0.5);
    }
    if (random(1) >= 0.6){
        offbg2 = random(-0.5,0.5);
    }
    
    if (random(1) >= 0.7){
        offbg3 = random(-0.5,0.5);
    }
    
    bg1 += offbg1;
    bg2 += offbg2;
    bg3 += offbg3;
    
    background(bg1, bg2, bg3);

    // Display and update food
    for (var i = foodItems.length - 1; i >= 0; i--) {
        foodItems[i].display();
        if (foodItems[i].consumed) {
            foodItems.splice(i, 1);
        }
    }

    // Display and update creatures
    for (var i = creatures.length - 1; i >= 0; i--) {
        var creature = creatures[i];
        creature.applyForce(new PVector(0, 0.1)); // Apply gravity
        creature.oscillate();

        // Each creature tries to eat food
        for (var j = 0; j < foodItems.length; j++) {
            creature.eat(foodItems[j]);
        }
        
        var mouse = new PVector(mouseX, mouseY);
        var dir = PVector.sub(mouse, creatures[i].position);
        dir.normalize();
        dir.mult(0.2);  // Ajustar a velocidade
        creatures[i].applyForce(dir);

        creature.update();
        creature.display();

        // Remove the creature if health is 0 or below
        if (creature.health <= 0) {
            creatures.splice(i, 1);
        }

        // Reproduce new creatures if health is high
        if (creature.health > 15 && random() < 0.01 && creatures.length < 50) {
            var baby = new Creature(creature.position.x, creature.position.y);
            creatures.push(baby);
            creature.health -= 50; // Reduce parent's health
        }
    }
};

function randomizeSpeeds(){
    for (var i =0; i<creatures.length;i++){
        creatures[i].velocity = new PVector(random(-10,10), random(-10,10));
    }
}

// Add a button to randomize speeds
function mouseClicked() {
    randomizeSpeeds();
}


