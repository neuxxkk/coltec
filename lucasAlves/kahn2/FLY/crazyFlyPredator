// Simples classe de Vetor caso PVector não esteja disponível
var createVector = function(x, y) {
    return {x: x, y: y};
};

var addVectors = function(v1, v2) {
    return createVector(v1.x + v2.x, v1.y + v2.y);
};

var limitVector = function(v, max) {
    var mag = Math.sqrt(v.x * v.x + v.y * v.y);
    if (mag > max) {
        v.x = (v.x / mag) * max;
        v.y = (v.y / mag) * max;
    }
    return v;
};

// Classe Mover
var Mover = function() {
    this.position = createVector(width/2, height/2);
    this.velocity = createVector(0, 0);
    this.acceleration = createVector(0, 0);
    this.maxSpeed = 8;
    this.maxForce = 2;  // Força máxima aplicada
};

Mover.prototype.update = function(food, predator) {
    var mouse = createVector(mouseX, mouseY);
    var dir = createVector(mouse.x - this.position.x, mouse.y - this.position.y);
    
    var distance = Math.sqrt(dir.x * dir.x + dir.y * dir.y);
    var closeness = (Math.sqrt(width * width + height * height) - distance) /
                    Math.sqrt(width * width + height * height);
    
    // Evitar a área próxima ao mouse
    if (distance < 100) {
        closeness = -closeness * 2;  // Inverter a direção e aumentar a força
    }
    
    dir.x = dir.x * closeness * 1.5;  // Aumentar o impacto da força de evitar o mouse
    dir.y = dir.y * closeness * 1.5;
    
    // Força em direção ao alimento
    var foodDir = createVector(food.position.x - this.position.x, food.position.y - this.position.y);
    var foodDistance = Math.sqrt(foodDir.x * foodDir.x + foodDir.y * foodDir.y);
    var foodAttraction = (foodDistance < 100) ? (100 - foodDistance) / 100 : 0;
    
    foodDir.x = foodDir.x * foodAttraction * this.maxForce;
    foodDir.y = foodDir.y * foodAttraction * this.maxForce;
    
    // Força em direção ao predador
    var predDir = createVector(this.position.x - predator.position.x, this.position.y - predator.position.y);
    var predDistance = Math.sqrt(predDir.x * predDir.x + predDir.y * predDir.y);
    var predRepulsion = (predDistance < 100) ? (100 - predDistance) / 100 : 0;
    
    predDir.x = predDir.x * predRepulsion * this.maxForce;
    predDir.y = predDir.y * predRepulsion * this.maxForce;
    
    var randomAccel = createVector(Math.random() * 2 - 1, Math.random() * 2 - 1);
    randomAccel.x *= 0.2;  // Reduzir o impacto da aceleração aleatória
    randomAccel.y *= 0.2;
    
    this.acceleration = addVectors(dir, addVectors(foodDir, addVectors(predDir, randomAccel)));
    this.velocity = addVectors(this.velocity, this.acceleration);
    this.velocity = limitVector(this.velocity, this.maxSpeed);
    
    // Oscilações de direção
    this.velocity.x += Math.sin(frameCount * 0.1) * 0.3;  // Reduzir o impacto das oscilações
    this.velocity.y += Math.cos(frameCount * 0.1) * 0.3;

    this.position = addVectors(this.position, this.velocity);
};

Mover.prototype.display = function() {
    // Efeito de rastro
    stroke(0, 0, 0, 50);
    strokeWeight(4);
    line(this.position.x, this.position.y, this.position.x - this.velocity.x, this.position.y - this.velocity.y);

    // Desenho do mover
    stroke(0);
    strokeWeight(2);
    fill(0, 0, 0, 150);
    ellipse(this.position.x, this.position.y, 20, 20);
};

Mover.prototype.checkEdges = function() {
    if (this.position.x >= width) {
        this.position.x = 0;
    } else if (this.position.x < 0) {
        this.position.x = width;
    }

    if (this.position.y >= height) {
        this.position.y = 0;
    } else if (this.position.y < 0) {
        this.position.y = height;
    }
};

// Classe Food
var Food = function() {
    this.position = createVector(Math.random() * width, Math.random() * height);
};

Food.prototype.display = function() {
    fill(0, 255, 0);
    noStroke();
    ellipse(this.position.x, this.position.y, 10, 10);
};

// Classe Predator
var Predator = function() {
    this.position = createVector(Math.random() * width, Math.random() * height);
};

Predator.prototype.display = function() {
    fill(255, 0, 0);
    noStroke();
    ellipse(this.position.x, this.position.y, 15, 15);
};

// Instâncias
var mover = new Mover();
var food = new Food();
var predator = new Predator();

draw = function() {
    background(255, 255, 255, 25);  // Leve transparência para efeito de rastro
    mover.update(food, predator);
    mover.checkEdges();
    mover.display(); 
    food.display();
    predator.display();
};

